# https://taskfile.dev/
version: "3"

vars:
  PYTHON: python3
  VENVS: .venvs
  TEST_ENV: .venvs/test
  LINT_ENV: .venvs/lint
  DOCS_ENV: .venvs/docs
  TEST_PYTHON: "{{.TEST_ENV}}/bin/python3"
  LINT_PYTHON: "{{.LINT_ENV}}/bin/python3"
  DOCS_PYTHON: "{{.DOCS_ENV}}/bin/python3"

env:
  FLIT_ROOT_INSTALL: "1"

tasks:
  install:flit:
    status:
      - which flit
    cmds:
      - python3 -m pip install flit
  venv:test:
    status:
      - test -d {{.TEST_ENV}}
    cmds:
      - "{{.PYTHON}} -m venv {{.TEST_ENV}}"
  venv:lint:
    status:
      - test -d {{.LINT_ENV}}
    cmds:
      - "{{.PYTHON}} -m venv {{.LINT_ENV}}"
  venv:docs:
    status:
      - test -d {{.DOCS_ENV}}
    cmds:
      - "{{.PYTHON}} -m venv {{.DOCS_ENV}}"
  install:test:
    sources:
      - pyproject.toml
    deps:
      - install:flit
      - venv:test
    cmds:
      - >
        flit install
        --python {{.TEST_PYTHON}}
        --extras=test,integrations
        --deps=production
        --symlink
  install:lint:
    sources:
      - pyproject.toml
    deps:
      - install:flit
      - venv:lint
    cmds:
      - >
        flit install
        --python {{.LINT_PYTHON}}
        --extras=lint,integrations
        --deps=production
        --symlink
  install:docs:
    sources:
      - pyproject.toml
    deps:
      - install:flit
      - venv:docs
    cmds:
      - >
        flit install
        --python {{.DOCS_PYTHON}}
        --extras=docs
        --deps=production
        --symlink
  install:nats-server:
    status:
      - which nats-server
    cmds:
      - go install github.com/nats-io/nats-server/v2@latest

  release:
    desc: generate and upload a new release
    deps:
      - install:flit
    cmds:
      - which gh
      - test {{.CLI_ARGS}}
      - cat walnats/__init__.py | grep {{.CLI_ARGS}}
      - rm -rf dist/
      - flit build
      - flit publish
      - git tag {{.CLI_ARGS}}
      - git push
      - git push --tags
      - gh release create --generate-notes {{.CLI_ARGS}}
      - gh release upload {{.CLI_ARGS}} ./dist/*

  pytest:
    desc: "run Python tests"
    deps:
      - install:test
      - install:nats-server
    cmds:
      - "{{.TEST_PYTHON}} -m pytest {{.CLI_ARGS}}"
  flake8:
    desc: "lint Python code"
    deps:
      - install:lint
    cmds:
      - "{{.LINT_PYTHON}} -m flake8 {{.CLI_ARGS}} ."
  mypy:
    desc: "check type annotations"
    deps:
      - install:lint
    cmds:
      - "{{.LINT_PYTHON}} -m mypy {{.CLI_ARGS}}"
  unify:
    desc: "convert double quotes to single ones"
    deps:
      - install:lint
    cmds:
      - "{{.LINT_PYTHON}} -m unify -r -i --quote=\\' {{.CLI_ARGS}} walnats tests"
  isort:
    desc: "sort imports"
    deps:
      - install:lint
    cmds:
      - "{{.LINT_PYTHON}} -m isort {{.CLI_ARGS}} ."
  isort:check:
    desc: "sort imports"
    deps:
      - install:lint
    cmds:
      - "{{.LINT_PYTHON}} -m isort --check {{.CLI_ARGS}} ."
  sphinx:
    desc: "generate HTML documentation"
    deps:
      - install:docs
    cmds:
      - rm -rf docs/build
      - "{{.DOCS_ENV}}/bin/sphinx-build -W docs docs/build {{.CLI_ARGS}}"

  # groups
  format:
    desc: "run all code formatters"
    cmds:
      - task: isort
      - task: unify
  lint:
    desc: "run all linters"
    cmds:
      - task: flake8
      - task: mypy
      - task: isort:check
  test:
    desc: "run all tests"
    cmds:
      - task: pytest
  all:
    desc: "run all code formatters, linters, and tests"
    cmds:
      - task: format
      - task: lint
      - task: test
